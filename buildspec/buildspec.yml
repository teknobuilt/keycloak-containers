---
    version: 0.2
    env:
      variables:
        REPOSITORY_NAME: 176023829637.dkr.ecr.us-east-1.amazonaws.com/test_poc
        REPOSITORY_BRANCH: master
        ENVIRONMENT_NAME: dev
        REPOSITORY_URI: 176023829637.dkr.ecr.us-east-1.amazonaws.com/test_poc

    phases:
      install:
        commands:
          - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
          - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl
          - chmod +x ./kubectl ./aws-iam-authenticator
          - export PATH=$PWD/:$PATH
          - yum upgrade -y
          - yum -y install jq python3-pip python3-dev && pip3 install --upgrade awscli
      pre_build:
          commands:
            - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
            - ls -a
            - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' k8s/sso.yml
            - $(aws ecr get-login --no-include-email)
            - export KUBECONFIG=$HOME/.kube/config
      build:
        commands:
          #- docker build --tag $REPOSITORY_URI:latest .
          - docker build server/Dockerfile -tag $REPOSITORY_URI:$TAG --build-arg GIT_REPO=https://ayadav02:7935add0ebb64eae80a60a164f5d23668f8dc68a@github.com/teknobuilt/keycloak.git --build-arg GIT_BRANCH=master

      post_build:
        commands:
          - docker push $REPOSITORY_URI:$TAG
          - echo $REPOSITORY_URI:$TAG
          #- CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
          - aws sts assume-role --role-arn arn:aws:iam::176023829637:role/dev_deployment_role --role-session-name codebuild-kubectl > creds.json
          - cat creds.json
          - export AWS_ACCESS_KEY_ID=$(cat creds.json | jq -r '.Credentials.AccessKeyId')
          - export AWS_SECRET_ACCESS_KEY=$(cat creds.json | jq -r '.Credentials.SecretAccessKey')
          - export AWS_SESSION_TOKEN=$(cat creds.json | jq -r '.Credentials.SessionToken')
          - aws sts get-caller-identity
          - echo "AWS_ACCESS_KEY_ID"
          #- aws s3 ls
          - aws eks update-kubeconfig --name eks_cluster --region us-east-1 --role-arn arn:aws:iam::176023829637:role/dev_deployment_role
          #- aws eks --region us-east-1 update-kubeconfig --name eks_cluster_poc
          - cat sso.yml
          - kubectl apply -f k8s/sso.yml
          #- export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
          #- export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
          #- export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
          #- export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
          #- aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
          #- kubectl apply -f hello-k8s.yml
          - printf '[{"name":"hello-k8s","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
    artifacts:
      files: build.json
